package com.ntu.edu.group5.ecommerce.service;

import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.ntu.edu.group5.ecommerce.entity.Product;
import com.ntu.edu.group5.ecommerce.repository.ProductRepository;

@Service
public class ProductServiceWithLoggingImpl implements ProductService {
    private ProductRepository productRepository;
    private final Logger logger = LoggerFactory.getLogger(ProductServiceWithLoggingImpl.class);

    public ProductServiceWithLoggingImpl(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    @Override
    public ArrayList<Product> searchProducts(String name) {
        logger.info(" ProductServiceWithLoggingImpl calling searchProducts()");
        List<Product> foundProducts = productRepository.findByName(name);
        return (ArrayList<Product>) foundProducts;
    }

    @Override
    public Product createProduct(Product product) {
        logger.info(" ProductServiceWithLoggingImpl calling createProduct()");
        Product newProduct = productRepository.save(product);
        return newProduct;
    }

    @Override
    public ArrayList<Product> getAllProducts() {
        logger.info(" ProductServiceWithLoggingImpl calling getAllProducts()");
        List<Product> allProducts = productRepository.findAll();
        return (ArrayList<Product>) allProducts;
    }

    @Override
    public void deleteProduct(Long id) {
        logger.info(" ProductServiceWithLoggingImpl calling deleteProduct()");
        productRepository.deleteById(id);
    }

    @Override
    public Product updateProduct(Long id, Product product) {
        logger.info(" ProductServiceWithLoggingImpl calling updateProduct()");
        if (productRepository.existsById(id)) {
            product.setId(id);
            return productRepository.save(product);
        }
        return null; // or throw an exception indicating that the Product with the given id doesn't
                     // exist
    }

    @Override
    public Product getProduct(Long id) {
        logger.info(" ProductServiceWithLoggingImpl calling getProduct()");
        return productRepository.findById(id).orElse(null);
    }

}
