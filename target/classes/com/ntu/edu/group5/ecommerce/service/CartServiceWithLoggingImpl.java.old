package com.ntu.edu.group5.ecommerce.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Primary
@Service
public class CartServiceWithLoggingImpl implements CartService{
    private final Logger logger = LoggerFactory.getLogger(CartServiceImpl.class);
    private CartRepository cartRepository;

    public CartServiceImpl(CartRepository cartRepository) {
        this.cartRepository = cartRepository;
    }

    @Override
    public Cart createCart(Cart cart) {
        logger.info("CartServiceWithLoggingImpl calling createCart()");
        Cart newCart = cartRepository.save(cart);
        return newCart;
    }

    @Override
    public ArrayList<Cart> getAllCarts() {
        logger.info("CartServiceWithLoggingImpl calling getAllCarts()");
        List<Cart> allCarts = cartRepository.findAll();
        return (ArrayList<Cart>) allCarts;
    }

    @Override
    public void deleteCart(Long id) {
        logger.info("CartServiceWithLoggingImpl calling deleteCart()");
        cartRepository.deleteById(id);
    }

    @Override
    public Cart updateCart(Long id, Cart cart) {
        logger.info("CartServiceWithLoggingImpl calling updateCart()");
        Cart cartToUpdate = cartRepository.findById(id).orElseThrow(() -> new CartNotFoundException(id));
        // update the cart retrieved fromn the database
        cartToUpdate.setCartTotal(cart.getCartTotal());
        // save the updated cart back to the database
        return cartRepository.save(cartToUpdate);
    }

    @Override
    public Cart getCart(Long id) {
        logger.info(" CartServiceWithLoggingImpl calling getCart()");
        return cartRepository.findById(id).orElseThrow(() -> new CartNotFoundException(id));
    }
}
